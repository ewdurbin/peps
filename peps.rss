<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>Newest Python PEPs</title>
    <link>https://peps.python.org/</link>
    <description>Newest Python Enhancement Proposals (PEPs): Information on new language features and some meta-information like release procedure and schedules.</description>
    <atom:link href="https://peps.python.org/peps.rss" rel="self"/>
    <docs>https://cyber.harvard.edu/rss/rss.html</docs>
    <language>en</language>
    <lastBuildDate>Wed, 21 May 2025 17:56:20 GMT</lastBuildDate>
    <item>
      <title>PEP 791: imath --- module for integer-specific mathematics functions</title>
      <link>https://peps.python.org/pep-0791/</link>
      <description>This PEP proposes a new module for number-theoretical, combinatorial and other functions defined for integer arguments, like math.gcd() or math.isqrt().</description>
      <author>Sergey B Kirpichev (skirpichev@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0791/</guid>
      <pubDate>Mon, 12 May 2025 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 790: Python 3.15 Release Schedule</title>
      <link>https://peps.python.org/pep-0790/</link>
      <description>This document describes the development and release schedule for Python 3.15.</description>
      <author>Hugo van Kemenade</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0790/</guid>
      <pubDate>Sat, 26 Apr 2025 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 788: Reimagining native threads</title>
      <link>https://peps.python.org/pep-0788/</link>
      <description>PyGILState_Ensure(), PyGILState_Release(), and other related functions in the PyGILState family are the most common way to create native threads that interact with Python. They have been the standard for over twenty years (PEP 311). But, over time, these functions have become problematic:</description>
      <author>Peter Bierma (zintensitydev@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0788/</guid>
      <pubDate>Wed, 23 Apr 2025 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 787: Safer subprocess usage using t-strings</title>
      <link>https://peps.python.org/pep-0787/</link>
      <description>PEP 750 introduced template strings (t-strings) as a generalization of f-strings, providing a way to safely handle string interpolation in various contexts. This PEP proposes extending the subprocess and shlex modules to natively support t-strings, enabling safer and more ergonomic shell command execution with interpolated values, as well as serving as a reference implementation for the t-string feature to improve API ergonomics.</description>
      <author>Nick Humrich (nick@humrich.us), Alyssa Coghlan (ncoghlan@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0787/</guid>
      <pubDate>Sun, 13 Apr 2025 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 785: New methods for easier handling of ``ExceptionGroup``\ s</title>
      <link>https://peps.python.org/pep-0785/</link>
      <description>As PEP 654 ExceptionGroup has come into widespread use across the Python community, some common but awkward patterns have emerged. We therefore propose adding two new methods to exception objects:</description>
      <author>Zac Hatfield-Dodds (zac@zhd.dev)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0785/</guid>
      <pubDate>Tue, 08 Apr 2025 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 784: Adding Zstandard to the standard library</title>
      <link>https://peps.python.org/pep-0784/</link>
      <description>Zstandard is a widely adopted, mature, and highly efficient compression standard. This PEP proposes adding a new module to the Python standard library containing a Python wrapper around Metaâ€™s zstd library, the default implementation. Additionally, to avoid name collisions with packages on PyPI and to present a unified interface to Python users, compression modules in the standard library will be moved under a compression.* package.</description>
      <author>Emma Harper Smith (emma@python.org)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0784/</guid>
      <pubDate>Sun, 06 Apr 2025 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 783: Emscripten Packaging</title>
      <link>https://peps.python.org/pep-0783/</link>
      <description>This PEP proposes a new platform tag series pyodide for binary Python package distributions for the Pyodide Python runtime.</description>
      <author>Hood Chatham (roberthoodchatham at gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0783/</guid>
      <pubDate>Fri, 28 Mar 2025 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 782: Add PyBytesWriter C API</title>
      <link>https://peps.python.org/pep-0782/</link>
      <description>Add a new PyBytesWriter C API to create bytes objects.</description>
      <author>Victor Stinner (vstinner@python.org)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0782/</guid>
      <pubDate>Thu, 27 Mar 2025 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 781: Make ``TYPE_CHECKING`` a built-in constant</title>
      <link>https://peps.python.org/pep-0781/</link>
      <description>This PEP proposes adding a new built-in variable, TYPE_CHECKING, to improve the experience of writing Python code with type annotations. It is evaluated as True when the code is being analyzed by a static type checker, and as False during normal runtime execution. Unlike typing.TYPE_CHECKING, which this variable replaces, it does not require an import statement.</description>
      <author>Inada Naoki (songofacandy@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0781/</guid>
      <pubDate>Mon, 24 Mar 2025 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 780: ABI features as environment markers</title>
      <link>https://peps.python.org/pep-0780/</link>
      <description>This PEP defines using ABI features as environment markers for project dependencies, through a new sys_abi_features environment marker. PEP 508 (later moved to packaging:dependency-specifiers) introduced environment markers to specify dependencies based on rules that describe when the dependency should be used. This PEP extends the environment markers to allow specifying dependencies based on specific ABI features of the Python interpreter. For this, it defines a set of ABI Features and specifies how they are made available for environment markers as a new marker variable, sys_abi_features.</description>
      <author>Klaus Zimmermann (klaus_zimmermann@gmx.de), Ralf Gommers (ralf.gommers@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0780/</guid>
      <pubDate>Fri, 21 Mar 2025 00:00:00 GMT</pubDate>
    </item>
  </channel>
</rss>
